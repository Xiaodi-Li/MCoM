#!/usr/bin/python

# Moving samples with less than 95 % AV detection rate : malware samples

#Written by: Ajit kumar, urwithajit9@gmail.com ,25Feb2015
#No license required for any kind of reuse
#If using this script for your work, please refer this on your willingness


#On given critera ( ((Total * 95) /100 ) >= Positive ) it will move all files which have
#  to a different location path/notmalware


#input: path for csv file with  neccsary columns "filename" ,"MD5hash","Total","Positive"
        #path of source directory
#example: input should be in the /raw-samples-metadata/Malware_VT_report_without_Zipped_3817.csv 

#output: 1 csv file with VirusTotal report with header such as Filename,MD5hash,Total and Positive
         #2 moving files with (Positive > 0 ) to path/notbenign

#Check for imported module before executating
# Top ten malware were selected from AV-test.org
#http://www.av-test.org/en/award/2014/

import os,shutil,csv

class wrong_label():
    
    def __init__(self,samplespath,VTreport_csv):
        self.source = VTreport_csv
        self.samples = samplespath

    @staticmethod
    def get_rootdir(path):
        tmp = path.split("/")
        return "/".join(tmp[0:-1]) + "/"

    @staticmethod
    def create_subdir(path):
        directory = wrong_label.get_rootdir(path)
        directory_notmalware = directory + "notmalware/"
        if not os.path.exists(directory_notmalware ):
            os.makedirs(directory_notmalware)

    def check_critera(self,total,positive,percent):
        expected = ((total * percent) / 100)
        #print expected,
        #print ":",
        #print positive,
        #print expected <= positive
        return expected <= positive

    def check_critera_range(self,total,positive,lower,upper):
        l= (total * lower) / 100
        u= (total * upper) / 100        
        return l <= positive <= u

    def check_top_10(self,line):
        count = 0        
        top10 = [line["TrendMicro"],line["F-Secure"],line["McAfee"],line["Symantec"],line["Avast"],line["Kaspersky"],line["BitDefender"],line["Sophos"],line["GData"],line["Panda"],line["Qihoo-360"]]
        for i in top10:
            if i != "":
                count += 1
        #print count            
        return count
    def read_csv_notmalware(self,percent):
        """
        Read csv file and return list of MD5 hashes
        """
        result=[]
        top10_count = 0
        csv_file= open(self.source,"r")
        reader = csv.DictReader(csv_file, delimiter=',')        
        for line in reader:
            if  self.check_top_10(line) >= 9:
                top10_count += 1
                if self.check_critera(int(line["Total"]),int(line["Positive"]),percent):
                    result.append(line["MD5hash"])
        csv_file.close()
        #print top10_count
        return result   
    
    def mov_files(self,filelist,subdir):
        """
        This will take file names of extra copy of duplicate files
        and will move those files to the duplicate files folder given by user
        """
        self.create_subdir(self.source)
        dst = wrong_label.get_rootdir(self.source) + subdir
        for f in filelist:
            src = self.samples + f            
            try:
                #print src,dst
                shutil.move(src,dst )                
            except IOError :
                print "Error in moving file", src
        print "All files moved."

def main():

    source = raw_input("Enter path of Virus Total report of Malware samples (sample files as Malware_VT_report_without_Zipped_3817.csv ). >>>")
    samplespath = raw_input("Enter the path for the malware samples. >>>")
	#Change threshold percentage according to your settings 85 means 85% AV detected as malware
    threshold= 85
 
    
    WR = wrong_label(samplespath,source)
    
    notmalwarefiles = WR.read_csv_notmalware(threshold)    
    
    WR.mov_files(notmalwarefiles,"notmalware/")    


if __name__ == "__main__":
    main()

